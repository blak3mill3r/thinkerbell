# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cc}
decl {\#include "digit_widgets.h"} {public global
} 

decl {\#include <iostream>} {private global
} 

decl {using namespace std;} {private local
} 

class VisualizeUI {open
} {
  decl {float * digit_images;} {private local
  }
  decl {void (*reconstruction_callback)(float*, float*, float*);} {private local
  }
  Function {crunch_numbers()} {open protected return_type void
  } {
    code {int examplei = (int)example_spinner->value();
float reconstruction_image[28*28];
float reconstruction_labels[16];

(*reconstruction_callback)( &digit_images[28*28*examplei], reconstruction_image, reconstruction_labels );
reconstruction->set_digit_image( reconstruction_image );
label_graph->set_labels( reconstruction_labels );
reconstruction->redraw();
label_graph->redraw();} {}
  }
  Function {VisualizeUI( float * digit_images_, void (*reconstruction_callback_)(float*, float*, float*) )} {open
  } {
    Fl_Window visualize_window {open
      xywh {986 315 215 220} type Double visible
    } {
      Fl_Spinner example_spinner {
        label example
        callback {original->set_digit_image( &digit_images[28*28 * (int)o->value() ] );
original->redraw();

crunch_numbers();}
        private xywh {60 1 40 24} minimum 0 maximum 9999 value 0
      }
      Fl_Box label_graph {
        label opinion selected
        xywh {0 115 200 64} color 247 align 1
        class LabelWidget
      }
      Fl_Box original {
        label original
        xywh {16 51 28 28} color 247 align 1
        class DigitWidget
      }
      Fl_Box reconstruction {
        label fantasy
        xywh {76 51 28 28} color 247 align 1
        class DigitWidget
      }
      Fl_Button {} {
        label again
        callback {crunch_numbers();}
        xywh {105 5 64 20}
      }
      Fl_Box {} {
        label {0 1 2 3 4 5 6 7 8 9}
        xywh {85 200 30 16} labelsize 24
      }
    }
    code {digit_images = digit_images_;} {}
    code {reconstruction_callback = reconstruction_callback_;} {}
  }
  Function {show(int argc, char** argv)} {open return_type void
  } {
    code {visualize_window->show(argc,argv);} {}
  }
} 

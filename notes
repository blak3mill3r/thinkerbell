todo
  * activation buffer for each vertex in current training phase (one is the original examples)
  * weight buffer for each edge in current training phase
  * weight scratch buffer for the last edge in current training phase
  trickiness: need separate temp memory space for each branch of tree

  create a map while doing this map<Vertex,int> vertex one down from a fork
  * starting from the one and only vertex with 0 out edges as required by the training algorithm
    * z=max(z, space required for neuron temporary values for this vertex
    * if forkinttheroad
      * z=max(z, sum of the size requirements of the n downstream paths
    * else
      * go down one
      * if nowhere to go, store size req in map at the vertex directly under the last fork or the top

  now the map contains sizes for the things which will have to coexist in temporary memory

  need an abstraction of "step" so device pointers into temp memory can be assigned to them

  create a map that contains ptrs into temporary memory for each step
  * starting from the only vertex with 0 out edges
    * if forkintheroad
      * make pointers to separate space for each vertex with sizes from the map above^ 
    * else the memory space is all ours at this point


// abstract step class
class DbnStep
{
  public:
  void set_operand_temp_ptr( Deviceptr p );
  void set_result_temp_ptr( Deviceptr p );
};

// descend from that class for the different steps
// mmul_add, mmul_overwrite, mmultb_add, mmultb_overwrite




    
    

  * enough temporary space to accomodate the maximum of this for each vertex being activated:
    * sum of this for each in-edge:
      * 

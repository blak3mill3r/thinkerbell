randomize order of samples
so that skinny 0 isn't always along with the same other stuff






Fine tuning discrimination with conjugate gradient method
---------------------------
the initial vector is the weights
the matrix is the system of linear equations,
  IOW a linear equation for each target neuron
  whose variables are the weights
  whose coefficients are the source neuron values

a single linear equations for a target neuron:

f(a,b,c,d,e) = qa + rb + sc + td + ue

there are 5 source neurons, the unknowns are the weights from this target neuron to a,b,c,d,e
the coefficients q,r,s,t,u are the energies of the source neurons
---------------------------------------<----this is right I think


from minimize.m doc:
The user must supply a function which returns the value and partial derivatives wrt all variables. 
in Hintons CG_CLASSIFY_INIT that means it returns
the error, the value we are minimizing, how "wrong" it was about which class the digit was?
the partial derivatives wrt each variable
  i.e. partial derivatives wrt each weight














Good stuff came with
learning rate .01 for like 16 seconds on layer ab
and then .0005 for a while

initial weight distribution is really important, think it's goodish at mean=0 sigma=0.1




----------_FIXME I don't think this is true, there's no problem with the bias adjustments
what's wrong is
when I do the negative bias delta adjusment
top vertex has binary vals not probabilities
NEED the probabilities to do the negative bias delta adjustment for the top vertex properly
IOW we need a temporary memory space for just the top bias deltas
---------------------



Simplify DBNMemoryMapper
biases_memory_layout_map could be simplified to map<Vertex,int>
maybe weights_memory_layout_map too

little things
name changes
  vertex_ptr -> neurons_ptr
move all the DBN* classes into a namespace deep_belief_network

make a generic "backend" interface for the DBN matrix operations at least



a picture of triple-buffering:

           |---|   |
           |   |   |
           | A |---|
           |   |   |
           |---| B |
           |   |   |
           | C |---|
           |   |   |
           |---| A |
           |   |   |
           | B |---|
           |   |   |
   t0   -->|---| C |
           |   |   |
           | A |---|<--    t1
           |   |   |
   t2   -->|---| B |
           |   |   |
           | C |---|
           |   |   |


at t0
synch with A-exec-finished in other stream
up activate through graph
synch with C-exec-finished in other stream
positive weight adjust step, weights-C = weights-B + delta
2 ags steps
negative weight adjust step, weights-C = weights-C - delta
record A-exec-finished

at t1
synch with B-exec-finished in other stream
up activate through graph
synch with A-exec-finished in other stream
positive weight adjust step, weights-A = weights-C + delta
2 ags steps
negative weight adjust step, weights-A = weights-A - delta
record B-exec-finished

